const TelegramBot = require('node-telegram-bot-api');
const { User, Task } = require('../models');
const config = require('../config/config');

class TelegramBotService {
    constructor() {
        this.bot = new TelegramBot(config.telegram.token, {
            polling: {
                interval: 300,
                autoStart: true,
                params: {
                    timeout: 10
                }
            }
        });

        this.waitingForTaskTitle = {};
        this.waitingForDeadline = {};
        this.waitingForPriority = {};

        this.setupErrorHandling();
        this.setupCommands();
    }

    setupErrorHandling() {
        this.bot.on('error', (error) => {
            console.error('Bot error:', error.code);
            this.handleError(error);
        });

        if (config.mode === 'polling') {
            this.bot.on('polling_error', (error) => {
                console.error('Polling error:', error.code);
                this.handleError(error);
            });
        }
    }

    handleError(error) {
        if (error.code === 'ETELEGRAM' || error.code === 'ECONNRESET') {
            setTimeout(() => {
                console.log('Attempting to reconnect...');
                if (config.mode === 'polling') {
                    this.bot.stopPolling()
                        .then(() => this.bot.startPolling())
                        .catch(console.error);
                } else {
                    this.setupWebhook()
                        .catch(console.error);
                }
            }, 5000);
        }
    }

    async setupWebhook() {
        if (config.mode === 'webhook') {
            try {
                await this.bot.setWebHook(config.webhook.url, {
                    certificate: config.webhook.certificate
                });
                console.log('Webhook set successfully');
            } catch (error) {
                console.error('Error setting webhook:', error);
                throw error;
            }
        }
    }

    setupCommands() {
        this.bot.onText(/\/start/, this.handleStart.bind(this));
        
        // –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        this.bot.onText(/üìù –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞/, async (msg) => {
            const chatId = msg.chat.id;
            await this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:');
            // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.waitingForTaskTitle[chatId] = true;
        });

        // –ú–æ–∏ –∑–∞–¥–∞—á–∏
        this.bot.onText(/üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏/, async (msg) => {
            const chatId = msg.chat.id;
            const user = await User.findOne({
                where: { telegramId: chatId.toString() }
            });
            
            if (user) {
                const tasks = await Task.findAll({
                    where: { UserId: user.id }
                });
                
                if (tasks.length > 0) {
                    const taskList = tasks.map(task => 
                        `${task.status === 'DONE' ? '‚úÖ' : '‚è≥'} ${task.title}`
                    ).join('\n');
                    await this.bot.sendMessage(chatId, `–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n${taskList}`);
                } else {
                    await this.bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á');
                }
            }
        });

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.bot.onText(/üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/, async (msg) => {
            const chatId = msg.chat.id;
            const user = await User.findOne({
                where: { telegramId: chatId.toString() }
            });
            
            if (user) {
                const stats = `
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${user.stats.tasksCompleted}
üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${user.stats.totalTasks}
‚≠êÔ∏è –û—á–∫–∏: ${user.stats.points}
                `;
                await this.bot.sendMessage(chatId, stats);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', async (msg) => {
            const chatId = msg.chat.id;
            
            if (this.waitingForTaskTitle[chatId]) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                const user = await User.findOne({
                    where: { telegramId: chatId.toString() }
                });
                
                if (user) {
                    await Task.create({
                        title: msg.text,
                        UserId: user.id,
                        status: 'TODO'
                    });
                    
                    await this.bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! ‚úÖ');
                }
                
                delete this.waitingForTaskTitle[chatId];
            }
        });

        this.bot.onText(/üíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç/, async (msg) => {
            const chatId = msg.chat.id;
            const donateText = `
üíù *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å TaskMaster*

–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç –∏ –æ–Ω –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –±—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.

–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º:
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –£–ª—É—á—à–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É

üí≥ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —á–µ—Ä–µ–∑ Tinkoff:
[–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã](https://www.tinkoff.ru/rm/r_NCNolaNuEd.LikyLscelb/DsIeH14488)

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! ‚ù§Ô∏è
            `;
            
            await this.bot.sendMessage(chatId, donateText, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });
        });
    }

    async handleStart(msg) {
        const chatId = msg.chat.id;
        try {
            const user = await User.findOne({
                where: { telegramId: chatId.toString() }
            });

            if (!user) {
                await User.create({
                    telegramId: chatId.toString(),
                    username: msg.from.username || msg.from.first_name,
                    settings: {
                        notifications: true,
                        theme: 'light'
                    },
                    stats: {
                        tasksCompleted: 0,
                        totalTasks: 0,
                        points: 0
                    }
                });
            }

            await this.bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskMaster! üöÄ');
        } catch (error) {
            console.error('Error in handleStart:', error);
            await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    async start() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
            await this.bot.deleteWebhook();
            
            if (config.mode === 'webhook') {
                return this.setupWebhook();
            } else {
                return this.bot.startPolling();
            }
        } catch (error) {
            console.error('Error starting bot:', error);
            throw error;
        }
    }
}

const botService = new TelegramBotService();
module.exports = botService;