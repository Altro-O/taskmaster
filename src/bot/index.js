const TelegramBot = require('node-telegram-bot-api');
const config = require('../config/config');
const { User, Task, Project, Template } = require('../models');
const TaskController = require('../controllers/TaskController');
const ProjectController = require('../controllers/ProjectController');
const ReminderService = require('../services/ReminderService');
const TemplateController = require('../controllers/TemplateController');
const AnalyticsService = require('../services/AnalyticsService');
const GameService = require('../services/GameService');
const LeaderboardService = require('../services/LeaderboardService');
const path = require('path');
const fs = require('fs');

const bot = new TelegramBot(config.telegram.token, { polling: true });
const reminderService = new ReminderService(bot);
const taskController = new TaskController(reminderService);
const gameService = new GameService();
const leaderboardService = new LeaderboardService();
const templateController = new TemplateController(taskController);
const analyticsService = new AnalyticsService();

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userStates = {};

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
const tempDir = path.join(__dirname, '../../temp');
if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir);
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const PRIORITY_KEYBOARD = {
    reply_markup: {
        keyboard: [
            ['üü¢ LOW', 'üü° MEDIUM'],
            ['üü† HIGH', 'üî¥ URGENT']
        ],
        one_time_keyboard: true
    }
};

const PRIORITY_MAP = {
    'üü¢ LOW': 'LOW',
    'üü° MEDIUM': 'MEDIUM',
    'üü† HIGH': 'HIGH',
    'üî¥ URGENT': 'URGENT'
};

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const [user] = await User.findOrCreate({
            where: { telegramId: chatId.toString() },
            defaults: {
                username: msg.from.username,
                settings: {
                    notifications: true,
                    theme: 'light'
                },
                stats: {
                    tasksCompleted: 0,
                    totalTasks: 0,
                    points: 0
                }
            }
        });

        await gameService.initUserAchievements(chatId.toString());
        
        await bot.sendMessage(chatId, 
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskMaster! üöÄ\n\n' +
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
            'üìù /new_task - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n' +
            'üìã /my_tasks - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏\n' +
            'üìÅ /new_project - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n' +
            'üìÇ /my_projects - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã\n' +
            'üìë /new_template - –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –∑–∞–¥–∞—á–∏\n' +
            'üìö /my_templates - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —à–∞–±–ª–æ–Ω—ã\n' +
            '‚ú® /create_from_template - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —à–∞–±–ª–æ–Ω–∞\n' +
            '‚≠êÔ∏è /set_priority - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏\n' +
            '‚úÖ /add_subtask - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É\n' +
            '‚òëÔ∏è /toggle_subtask - –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É\n' +
            'üèÜ /leaderboard - –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥\n' +
            'üìà /weekly_top - –¢–æ–ø –Ω–µ–¥–µ–ª–∏\n' +
            'üéØ /my_rank - –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥\n' +
            'üìä /stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
            'üìà /project_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º\n' +
            'üìâ /productivity - –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n' +
            'üéÆ /level - –ú–æ–π —É—Ä–æ–≤–µ–Ω—å –∏ –æ—á–∫–∏\n' +
            'üèÖ /achievements - –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n' +
            'üìã /kanban - –ü–æ–∫–∞–∑–∞—Ç—å Kanban-–¥–æ—Å–∫—É\n' +
            '‚ÜîÔ∏è /move_task - –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É\n' +
            'üìä /chart - –ì—Ä–∞—Ñ–∏–∫ –∑–∞–¥–∞—á\n' +
            'üìÑ /report_pdf - –û—Ç—á–µ—Ç –≤ PDF\n' +
            'üìä /report_excel - –û—Ç—á–µ—Ç –≤ Excel\n' +
            '‚ùì /help - –ü–æ–º–æ—â—å'
        );
    } catch (error) {
        console.error('Error in /start command:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
bot.onText(/\/new_task/, async (msg) => {
    const chatId = msg.chat.id;
    userStates[chatId] = { step: 'AWAITING_TASK_TITLE' };
    await bot.sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:');
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
bot.onText(/\/my_tasks/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const tasks = await Task.findAll({
            where: { 
                UserId: chatId.toString(),
                status: { [Op.ne]: 'DONE' }
            },
            order: [['createdAt', 'DESC']]
        });

        if (tasks.length === 0) {
            await bot.sendMessage(chatId, 'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á');
            return;
        }

        const tasksMessage = tasks.map(task => 
            `üìå ${task.title}\n` +
            `üìä –°—Ç–∞—Ç—É—Å: ${task.status}\n` +
            `‚≠êÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority}\n` +
            `${task.deadline ? `‚è∞ –î–µ–¥–ª–∞–π–Ω: ${new Date(task.deadline).toLocaleDateString()}\n` : ''}` +
            `üîë ID: ${task.id}\n` +
            `-------------------`
        ).join('\n');

        await bot.sendMessage(chatId, tasksMessage);
    } catch (error) {
        console.error('Error getting tasks:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á');
    }
});

// Kanban –¥–æ—Å–∫–∞
bot.onText(/\/kanban/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const tasks = await Task.findAll({
            where: { UserId: chatId.toString() },
            order: [['updatedAt', 'DESC']]
        });

        const board = {
            TODO: tasks.filter(t => t.status === 'TODO'),
            IN_PROGRESS: tasks.filter(t => t.status === 'IN_PROGRESS'),
            IN_REVIEW: tasks.filter(t => t.status === 'IN_REVIEW'),
            DONE: tasks.filter(t => t.status === 'DONE')
        };

        let message = 'üìã Kanban –¥–æ—Å–∫–∞:\n\n';
        
        for (const [status, statusTasks] of Object.entries(board)) {
            message += `üìä ${status}:\n`;
            if (statusTasks.length === 0) {
                message += 'üì≠ –ù–µ—Ç –∑–∞–¥–∞—á\n';
            } else {
                statusTasks.forEach(task => {
                    message += `üìå ${task.title} (${task.priority})\n`;
                });
            }
            message += '\n';
        }

        await bot.sendMessage(chatId, message);
    } catch (error) {
        console.error('Error showing kanban:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–æ—Å–∫–∏');
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const stats = await analyticsService.getTasksStats(chatId.toString());
        
        const message = 
            'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:\n\n' +
            `üìà –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.total}\n` +
            `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.byStatus.DONE}\n` +
            `üîÑ –í —Ä–∞–±–æ—Ç–µ: ${stats.byStatus.IN_PROGRESS}\n` +
            `üëÄ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${stats.byStatus.IN_REVIEW}\n` +
            `üìù –û–∂–∏–¥–∞—é—Ç: ${stats.byStatus.TODO}\n\n` +
            `üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stats.completionRate}%\n` +
            `‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${stats.overdue}`;

        await bot.sendMessage(chatId, message);
    } catch (error) {
        console.error('Error getting stats:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

// ... –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ...

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!userStates[chatId] || text.startsWith('/')) return;

    try {
        switch (userStates[chatId].step) {
            case 'AWAITING_TASK_TITLE':
                userStates[chatId].taskTitle = text;
                userStates[chatId].step = 'AWAITING_TASK_DESCRIPTION';
                await bot.sendMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
                break;

            case 'AWAITING_TASK_DESCRIPTION':
                userStates[chatId].taskDescription = text === '-' ? '' : text;
                userStates[chatId].step = 'AWAITING_TASK_DEADLINE';
                await bot.sendMessage(
                    chatId, 
                    '‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):'
                );
                break;

            // ... –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ...
        }
    } catch (error) {
        console.error('Error processing message:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        delete userStates[chatId];
    }
});

module.exports = bot;