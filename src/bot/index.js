const TelegramBot = require('node-telegram-bot-api');
const config = require('../config/config');
const TaskController = require('../controllers/TaskController');
const ProjectController = require('../controllers/ProjectController');
const ReminderService = require('../services/ReminderService');
const TemplateController = require('../controllers/TemplateController');
const AnalyticsService = require('../services/AnalyticsService');
const GameService = require('../services/GameService');
const ReportService = require('../services/ReportService');
const path = require('path');
const fs = require('fs');
const LeaderboardService = require('../services/LeaderboardService');

const bot = new TelegramBot(config.telegram.token, { polling: true });
const reminderService = new ReminderService(bot);
const taskController = new TaskController(reminderService);
const templateController = new TemplateController(taskController);

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userStates = {};

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const tempDir = path.join(__dirname, '../../temp');
if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir);
}

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    await GameService.initUserAchievements(chatId.toString());
    
    await bot.sendMessage(chatId, 
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskMaster! üöÄ\n\n' +
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/new_task - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n' +
        '/my_tasks - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏\n' +
        '/new_project - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n' +
        '/my_projects - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã\n' +
        '/new_template - –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –∑–∞–¥–∞—á–∏\n' +
        '/my_templates - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —à–∞–±–ª–æ–Ω—ã\n' +
        '/create_from_template - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —à–∞–±–ª–æ–Ω–∞\n' +
        '/set_priority - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏\n' +
        '/add_subtask - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É\n' +
        '/toggle_subtask - –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n' +
        '/leaderboard - –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥\n' +
        '/weekly_top - –¢–æ–ø –Ω–µ–¥–µ–ª–∏\n' +
        '/my_rank - –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥\n' +
        '/help - –ü–æ–º–æ—â—å\n' +
        '/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
        '/project_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º\n' +
        '/productivity - –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n' +
        '/level - –ú–æ–π —É—Ä–æ–≤–µ–Ω—å –∏ –æ—á–∫–∏\n' +
        '/achievements - –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n' +
        '/kanban - –ü–æ–∫–∞–∑–∞—Ç—å Kanban-–¥–æ—Å–∫—É\n' +
        '/move_task - –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É\n' +
        '/chart - –ì—Ä–∞—Ñ–∏–∫ –∑–∞–¥–∞—á\n' +
        '/report_pdf - –û—Ç—á–µ—Ç –≤ PDF\n' +
        '/report_excel - –û—Ç—á–µ—Ç –≤ Excel\n' +
        '/help - –ü–æ–º–æ—â—å'
    );
});

bot.onText(/\/new_task/, async (msg) => {
    const chatId = msg.chat.id;
    userStates[chatId] = { step: 'AWAITING_TASK_TITLE' };
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:');
});

bot.onText(/\/new_project/, async (msg) => {
    const chatId = msg.chat.id;
    userStates[chatId] = { step: 'AWAITING_PROJECT_TITLE' };
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:');
});

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
bot.onText(/\/new_template/, async (msg) => {
    const chatId = msg.chat.id;
    userStates[chatId] = { step: 'AWAITING_TEMPLATE_TITLE' };
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:');
});

// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤
bot.onText(/\/my_templates/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const templates = await templateController.getUserTemplates(chatId.toString());
        if (templates.length === 0) {
            await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤');
            return;
        }

        const templatesMessage = templates.map(template => 
            `üìã ${template.title}\n` +
            `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${template.priority}\n` +
            `${template.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${template.description}\n` : ''}` +
            `${template.schedule ? `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${template.schedule}\n` : ''}` +
            `ID: ${template._id}\n` +
            `-------------------`
        ).join('\n');

        await bot.sendMessage(chatId, templatesMessage);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
bot.onText(/\/create_from_template (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const templateId = match[1];
    
    try {
        const task = await templateController.createTaskFromTemplate(templateId, chatId.toString());
        if (!task) {
            await bot.sendMessage(chatId, '‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        await bot.sendMessage(chatId, '‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞');
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!userStates[chatId] || text.startsWith('/')) return;

    switch (userStates[chatId].step) {
        case 'AWAITING_TASK_TITLE':
            userStates[chatId].taskTitle = text;
            userStates[chatId].step = 'AWAITING_TASK_DESCRIPTION';
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
            break;

        case 'AWAITING_TASK_DESCRIPTION':
            userStates[chatId].taskDescription = text === '-' ? '' : text;
            userStates[chatId].step = 'AWAITING_TASK_DEADLINE';
            await bot.sendMessage(
                chatId, 
                '–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):'
            );
            break;

        case 'AWAITING_TASK_DEADLINE':
            let deadline = null;
            if (text !== '-') {
                const [day, month, year] = text.split('.');
                deadline = new Date(year, month - 1, day);
                
                if (isNaN(deadline.getTime())) {
                    await bot.sendMessage(
                        chatId, 
                        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:'
                    );
                    return;
                }
            }

            userStates[chatId].deadline = deadline;
            userStates[chatId].step = 'AWAITING_TASK_PRIORITY';
            
            await bot.sendMessage(
                chatId,
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:',
                {
                    reply_markup: {
                        keyboard: [
                            ['üü¢ LOW', 'üü° MEDIUM'],
                            ['üü† HIGH', 'üî¥ URGENT']
                        ],
                        one_time_keyboard: true
                    }
                }
            );
            break;

        case 'AWAITING_TASK_PRIORITY':
            let priority;
            switch (text) {
                case 'üü¢ LOW': priority = 'LOW'; break;
                case 'üü° MEDIUM': priority = 'MEDIUM'; break;
                case 'üü† HIGH': priority = 'HIGH'; break;
                case 'üî¥ URGENT': priority = 'URGENT'; break;
                default:
                    await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
                    return;
            }

            try {
                await taskController.createTask(
                    chatId.toString(),
                    userStates[chatId].taskTitle,
                    userStates[chatId].taskDescription,
                    userStates[chatId].deadline,
                    null, // projectId
                    priority
                );
                await bot.sendMessage(chatId, '‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', {
                    reply_markup: { remove_keyboard: true }
                });
            } catch (error) {
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
            }
            delete userStates[chatId];
            break;

        case 'AWAITING_PROJECT_TITLE':
            userStates[chatId].projectTitle = text;
            userStates[chatId].step = 'AWAITING_PROJECT_DESCRIPTION';
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
            break;

        case 'AWAITING_PROJECT_DESCRIPTION':
            const projectDescription = text === '-' ? '' : text;
            try {
                await ProjectController.createProject(chatId.toString(), userStates[chatId].projectTitle, projectDescription);
                await bot.sendMessage(chatId, '‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            } catch (error) {
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞');
            }
            delete userStates[chatId];
            break;

        case 'AWAITING_SUBTASK_TITLE':
            try {
                const task = await taskController.addSubtask(
                    userStates[chatId].taskId,
                    chatId.toString(),
                    text
                );
                if (!task) {
                    await bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                } else {
                    await bot.sendMessage(chatId, '‚úÖ –ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
                }
            } catch (error) {
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏');
            }
            delete userStates[chatId];
            break;

        case 'AWAITING_TEMPLATE_TITLE':
            userStates[chatId].templateTitle = text;
            userStates[chatId].step = 'AWAITING_TEMPLATE_DESCRIPTION';
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ (–∏–ª–∏ –æ—Ç–øÔøΩÔøΩ–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
            break;

        case 'AWAITING_TEMPLATE_DESCRIPTION':
            userStates[chatId].templateDescription = text === '-' ? '' : text;
            userStates[chatId].step = 'AWAITING_TEMPLATE_PRIORITY';
            await bot.sendMessage(
                chatId,
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞—á –∏–∑ —à–∞–±–ª–æ–Ω–∞:',
                {
                    reply_markup: {
                        keyboard: [
                            ['üü¢ LOW', 'üü° MEDIUM'],
                            ['üü† HIGH', 'üî¥ URGENT']
                        ],
                        one_time_keyboard: true
                    }
                }
            );
            break;

        case 'AWAITING_TEMPLATE_PRIORITY':
            let priority;
            switch (text) {
                case 'üü¢ LOW': priority = 'LOW'; break;
                case 'üü° MEDIUM': priority = 'MEDIUM'; break;
                case 'üü† HIGH': priority = 'HIGH'; break;
                case 'üî¥ URGENT': priority = 'URGENT'; break;
                default:
                    await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
                    return;
            }

            userStates[chatId].templatePriority = priority;
            userStates[chatId].step = 'AWAITING_TEMPLATE_SCHEDULE';
            await bot.sendMessage(
                chatId, 
                '–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ cron (–Ω–∞–ø—Ä–∏–º–µ—Ä, "0 9 * * 1" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –≤ 9:00)\n' +
                '–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:'
            );
            break;

        case 'AWAITING_TEMPLATE_SCHEDULE':
            const schedule = text === '-' ? null : text;
            try {
                await templateController.createTemplate(
                    chatId.toString(),
                    userStates[chatId].templateTitle,
                    userStates[chatId].templateDescription,
                    userStates[chatId].templatePriority,
                    null, // projectId
                    schedule
                );
                await bot.sendMessage(chatId, '‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', {
                    reply_markup: { remove_keyboard: true }
                });
            } catch (error) {
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞');
            }
            delete userStates[chatId];
            break;

        case 'AWAITING_NEW_STATUS':
            let newStatus;
            switch (text) {
                case 'üì• BACKLOG': newStatus = 'BACKLOG'; break;
                case 'üìù TODO': newStatus = 'TODO'; break;
                case 'üîÑ IN_PROGRESS': newStatus = 'IN_PROGRESS'; break;
                case 'üëÄ IN_REVIEW': newStatus = 'IN_REVIEW'; break;
                case '‚úÖ DONE': newStatus = 'DONE'; break;
                default:
                    await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
                    return;
            }

            try {
                const task = await taskController.moveTask(
                    userStates[chatId].taskId,
                    chatId.toString(),
                    newStatus
                );

                if (!task) {
                    await bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                } else {
                    await bot.sendMessage(chatId, '‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω', {
                        reply_markup: { remove_keyboard: true }
                    });

                    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    if (newStatus === 'DONE') {
                        const achievements = await GameService.updateAchievements(chatId.toString());
                        const newAchievements = achievements.filter(a => 
                            a.completed && 
                            a.completedAt && 
                            new Date(a.completedAt).toDateString() === new Date().toDateString()
                        );

                        if (newAchievements.length > 0) {
                            const achievementNames = {
                                TASKS_COMPLETED: '‚úÖ –ú–∞—Å—Ç–µ—Ä –∑–∞–¥–∞—á',
                                PRIORITY_MASTER: '‚ö° –ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤',
                                EARLY_BIRD: '‚è∞ –û–ø–µ—Ä–µ–∂–∞—è –≤—Ä–µ–º—è'
                            };

                            const congratsMessage = 
                                'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n' +
                                newAchievements.map(a => 
                                    `${achievementNames[a.type]} - –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!`
                                ).join('\n');

                            await bot.sendMessage(chatId, congratsMessage);
                        }
                    }
                }
            } catch (error) {
                await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏');
            }
            delete userStates[chatId];
            break;
    }
});

bot.onText(/\/my_tasks/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const tasks = await taskController.getUserTasks(chatId.toString());
        if (tasks.length === 0) {
            await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á');
            return;
        }

        const priorityEmoji = {
            LOW: 'üü¢',
            MEDIUM: 'üü°',
            HIGH: 'üü†',
            URGENT: 'üî¥'
        };

        const tasksMessage = tasks.map(task => {
            let message = `${priorityEmoji[task.priority]} ${task.title}\n` +
                `–°—Ç–∞—Ç—É—Å: ${task.status}\n` +
                `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority}\n` +
                `${task.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}\n` : ''}` +
                `${task.deadline ? `–î–µ–¥–ª–∞–π–Ω: ${task.deadline.toLocaleDateString()}\n` : ''}` +
                `ID: ${task._id}\n`;

            if (task.subtasks && task.subtasks.length > 0) {
                message += '\n–ü–æ–¥–∑–∞–¥–∞—á–∏:\n' + task.subtasks.map(subtask =>
                    `${subtask.completed ? '‚úÖ' : '‚¨ú'} ${subtask.title} (ID: ${subtask._id})`
                ).join('\n');
            }

            return message + '\n-------------------';
        }).join('\n');

        await bot.sendMessage(chatId, tasksMessage);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á');
    }
});

bot.onText(/\/my_projects/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const projects = await ProjectController.getUserProjects(chatId.toString());
        if (projects.length === 0) {
            await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤');
            return;
        }

        const projectsMessage = projects.map(project => 
            `üìÅ ${project.title}\n` +
            `${project.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${project.description}\n` : ''}` +
            `ID: ${project._id}\n` +
            `-------------------`
        ).join('\n');

        await bot.sendMessage(chatId, projectsMessage);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–¥–ª–∞–π–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
bot.onText(/\/set_deadline (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const taskId = match[1];
    
    userStates[chatId] = { 
        step: 'AWAITING_DEADLINE_UPDATE',
        taskId: taskId
    };
    
    await bot.sendMessage(
        chatId, 
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:'
    );
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
bot.onText(/\/set_priority (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const taskId = match[1];
    
    userStates[chatId] = { 
        step: 'AWAITING_PRIORITY_UPDATE',
        taskId: taskId
    };
    
    await bot.sendMessage(
        chatId,
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:',
        {
            reply_markup: {
                keyboard: [
                    ['üü¢ LOW', 'üü° MEDIUM'],
                    ['üü† HIGH', 'üî¥ URGENT']
                ],
                one_time_keyboard: true
            }
        }
    );
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∑–∞–∞—á–∏
bot.onText(/\/add_subtask (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const taskId = match[1];
    
    userStates[chatId] = { 
        step: 'AWAITING_SUBTASK_TITLE',
        taskId: taskId
    };
    
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∑–∞–∞—á–∏:');
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
bot.onText(/\/toggle_subtask (.+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const taskId = match[1];
    const subtaskId = match[2];
    
    try {
        const task = await taskController.toggleSubtask(taskId, chatId.toString(), subtaskId);
        if (!task) {
            await bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞—á–∞ –∏–ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        await bot.sendMessage(chatId, '‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏
        const achievements = await GameService.updateAchievements(chatId.toString());
        const newAchievements = achievements.filter(a => 
            a.completed && 
            a.completedAt && 
            new Date(a.completedAt).toDateString() === new Date().toDateString()
        );

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
        if (newAchievements.length > 0) {
            const achievementNames = {
                TASKS_COMPLETED: '‚úÖ –ú–∞—Å—Ç–µ—Ä –∑–∞–¥–∞—á',
                PROJECTS_COMPLETED: 'üìÅ –ü—Ä–æ–µ–∫—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
                STREAK_DAYS: 'üî• –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Ä–∏—è',
                PRIORITY_MASTER: '‚ö° –ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤',
                EARLY_BIRD: '‚è∞ –û–ø–µ—Ä–µ–∂–∞—è –≤—Ä–µ–º—è',
                SUBTASK_MASTER: 'üìù –ú–∞—Å—Ç–µ—Ä –ø–æ–¥–∑–∞–¥–∞—á'
            };

            const congratsMessage = 
                'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n' +
                newAchievements.map(a => 
                    `${achievementNames[a.type]} - –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!`
                ).join('\n');

            await bot.sendMessage(chatId, congratsMessage);
        }
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const stats = await AnalyticsService.getTasksStats(chatId.toString());
        
        const message = 
            'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:\n\n' +
            `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.total}\n\n` +
            '–ü–æ —Å—Ç–∞—Ç—É—Å—É:\n' +
            `üìù TODO: ${stats.byStatus.TODO}\n` +
            `üîÑ IN PROGRESS: ${stats.byStatus.IN_PROGRESS}\n` +
            `üëÄ IN REVIEW: ${stats.byStatus.IN_REVIEW}\n` +
            `‚úÖ DONE: ${stats.byStatus.DONE}\n\n` +
            '–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:\n' +
            `üü¢ LOW: ${stats.byPriority.LOW}\n` +
            `üü° MEDIUM: ${stats.byPriority.MEDIUM}\n` +
            `üü† HIGH: ${stats.byPriority.HIGH}\n` +
            `üî¥ URGENT: ${stats.byPriority.URGENT}\n\n` +
            `–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stats.completionRate}%\n` +
            `–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${stats.overdue}`;

        await bot.sendMessage(chatId, message);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        const chartPath = await ReportService.generateTasksChart(stats);
        await bot.sendPhoto(chatId, chartPath, {
            caption: '–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º'
        });
        fs.unlinkSync(chartPath);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
bot.onText(/\/project_stats/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const projectStats = await AnalyticsService.getProjectStats(chatId.toString());
        
        if (projectStats.length === 0) {
            await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏');
            return;
        }

        const message = projectStats.map(project =>
            `üìÅ ${project.name}\n` +
            `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${project.total}\n` +
            `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${project.completed}\n` +
            `üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${project.inProgress}\n` +
            `üìù –û–∂–∏–¥–∞–µ—Ç: ${project.todo}\n` +
            '-------------------'
        ).join('\n');

        await bot.sendMessage(chatId, message);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
bot.onText(/\/productivity/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const productivityData = await AnalyticsService.getProductivityReport(chatId.toString());
        
        const message = 'üìà –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n' +
            productivityData.map(day =>
                `üìÖ ${day.date}\n` +
                `–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${day.created}\n` +
                `–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${day.completed}\n` +
                '-------------------'
            ).join('\n');

        await bot.sendMessage(chatId, message);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
bot.onText(/\/achievements/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
        const achievements = await GameService.updateAchievements(chatId.toString());
        
        const achievementNames = {
            TASKS_COMPLETED: '‚úÖ –ú–∞—Å—Ç–µ—Ä –∑–∞–¥–∞—á',
            PROJECTS_COMPLETED: 'üìÅ –ü—Ä–æ–µ–∫—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
            STREAK_DAYS: 'üî• –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Ä–∏—è',
            PRIORITY_MASTER: '‚ö° –ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤',
            EARLY_BIRD: '‚è∞ –û–ø–µ—Ä–µ–∂–∞—è –≤—Ä–µ–º—è',
            SUBTASK_MASTER: 'üìù –ú–∞—Å—Ç–µ—Ä –ø–æ–¥–∑–∞–¥–∞—á'
        };

        const achievementLevels = {
            TASKS_COMPLETED: [5, 20, 50, 100],
            PROJECTS_COMPLETED: [1, 5, 10, 20],
            STREAK_DAYS: [3, 7, 14, 30],
            PRIORITY_MASTER: [5, 15, 30, 50],
            EARLY_BIRD: [5, 15, 30, 50],
            SUBTASK_MASTER: [10, 30, 60, 100]
        };

        const message = achievements.map(achievement => {
            const levels = achievementLevels[achievement.type];
            const currentTarget = levels[achievement.level - 1] || levels[levels.length - 1];
            const progress = achievement.completed ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ! üèÜ' : 
                `${achievement.progress}/${currentTarget} (–£—Ä–æ–≤–µ–Ω—å ${achievement.level})`;

            return `${achievementNames[achievement.type]}\n` +
                   `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}\n` +
                   '-------------------';
        }).join('\n');

        await bot.sendMessage(chatId, 
            'üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n' + message
        );
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–ΩÔøΩÔøΩ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–≤–Ω—è –∏ –æ—á–∫–æ–≤
bot.onText(/\/level/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const stats = await GameService.getUserStats(chatId.toString());
        
        const message = 
            'üéÆ –í–∞—à –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n' +
            `–£—Ä–æ–≤–µ–Ω—å: ${stats.level} üåü\n` +
            `–û—á–∫–∏: ${stats.points} ‚≠ê\n\n` +
            '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n' +
            `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.achievements.completed}/${stats.achievements.total}\n` +
            `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${stats.achievements.percentage}%`;

        await bot.sendMessage(chatId, message);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Kanban-–¥–æ—Å–∫–∏
bot.onText(/\/kanban/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const board = await taskController.getKanbanBoard(chatId.toString());
        
        const statusEmoji = {
            BACKLOG: 'üì•',
            TODO: 'üìù',
            IN_PROGRESS: 'üîÑ',
            IN_REVIEW: 'üëÄ',
            DONE: '‚úÖ'
        };

        let message = 'üìä Kanban-–¥–æ—Å–∫–∞:\n\n';
        
        for (const [status, tasks] of Object.entries(board)) {
            message += `${statusEmoji[status]} ${status} (${tasks.length})\n`;
            if (tasks.length > 0) {
                message += tasks.map(task => 
                    `- ${task.title} ${task.priority === 'URGENT' ? 'üî¥' : ''}\n` +
                    `  ID: ${task._id}`
                ).join('\n');
                message += '\n\n';
            } else {
                message += '–ù–µ—Ç –∑–∞–¥–∞—á\n\n';
            }
        }

        await bot.sendMessage(chatId, message);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Kanban-–¥–æ—Å–∫–∏');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
bot.onText(/\/move_task (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const taskId = match[1];
    
    userStates[chatId] = { 
        step: 'AWAITING_NEW_STATUS',
        taskId: taskId
    };
    
    await bot.sendMessage(
        chatId,
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:',
        {
            reply_markup: {
                keyboard: [
                    ['üì• BACKLOG', 'üìù TODO'],
                    ['üîÑ IN_PROGRESS', 'üëÄ IN_REVIEW'],
                    ['‚úÖ DONE']
                ],
                one_time_keyboard: true
            }
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–¥–∞—á
bot.onText(/\/chart/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const stats = await AnalyticsService.getTasksStats(chatId.toString());
        const chartPath = await ReportService.generateTasksChart(stats);

        await bot.sendPhoto(chatId, chartPath, {
            caption: 'üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º'
        });

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(chartPath);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PDF –æ—Ç—á–µ—Ç–∞
bot.onText(/\/report_pdf/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const tasksData = await AnalyticsService.getTasksStats(chatId.toString());
        const projectsData = await AnalyticsService.getProjectStats(chatId.toString());
        const productivityData = await AnalyticsService.getProductivityReport(chatId.toString());

        const pdfPath = await ReportService.generatePDFReport(
            tasksData,
            projectsData,
            productivityData
        );

        await bot.sendDocument(chatId, pdfPath, {
            caption: 'üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF'
        });

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(pdfPath);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–∞');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞
bot.onText(/\/report_excel/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const tasksData = await AnalyticsService.getTasksStats(chatId.toString());
        const projectsData = await AnalyticsService.getProjectStats(chatId.toString());
        const productivityData = await AnalyticsService.getProductivityReport(chatId.toString());

        const excelPath = await ReportService.generateExcelReport(
            tasksData,
            projectsData,
            productivityData
        );

        await bot.sendDocument(chatId, excelPath, {
            caption: 'üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel'
        });

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(excelPath);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –æ—ÇÔøΩÔøΩ–µ—Ç–∞');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
bot.onText(/\/leaderboard/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const users = await LeaderboardService.getGlobalLeaderboard();
        
        let message = 'üèÜ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:\n\n';
        users.forEach((user, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
            message += `${medal} –ò–≥—Ä–æ–∫ ${user._id}\n` +
                      `   –û—á–∫–∏: ${user.totalPoints} ‚≠ê\n` +
                      `   –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${user.completedAchievements} üèÜ\n` +
                      `   –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${user.tasksCompleted}/${user.totalTasks}\n` +
                      `   –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${user.completionRate}%\n` +
                      '-------------------\n';
        });

        await bot.sendMessage(chatId, message);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞
bot.onText(/\/weekly_top/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const users = await LeaderboardService.getWeeklyLeaderboard();
        
        let message = 'üìÖ –¢–æ–ø –Ω–µ–¥–µ–ª–∏:\n\n';
        users.forEach((user, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
            message += `${medal} –ò–≥—Ä–æ–∫ ${user._id}\n` +
                      `   –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${user.completedTasks}\n` +
                      `   –û—á–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: ${user.totalPoints} ‚≠ê\n` +
                      '-------------------\n';
        });

        await bot.sendMessage(chatId, message);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∞');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
bot.onText(/\/my_rank/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        const rank = await LeaderboardService.getUserRank(chatId.toString());
        
        if (!rank) {
            await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á!');
            return;
        }

        const message = 
            'üéØ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:\n\n' +
            `–ú–µ—Å—Ç–æ: ${rank.rank} –∏–∑ ${rank.totalUsers}\n` +
            `–í—ã –ª—É—á—à–µ —á–µ–º ${rank.percentile}% –∏–≥—Ä–æ–∫–æ–≤!\n\n` +
            '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™';

        await bot.sendMessage(chatId, message);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞');
    }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /help
bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    const helpMessage = 
        'üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n' +
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã ...
        'üèÜ –†–µ–π—Ç–∏–Ω–≥–∏ –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:\n' +
        '/leaderboard - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥\n' +
        '/weekly_top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –Ω–µ–¥–µ–ª–∏\n' +
        '/my_rank - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥\n\n' +
        'üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:\n' +
        '/stats - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
        '/chart - –ì—Ä–∞—Ñ–∏–∫ –∑–∞–¥–∞—á\n' +
        '/report_pdf - –û—Ç—á–µ—Ç –≤ PDF\n' +
        '/report_excel - –û—Ç—á–µ—Ç –≤ Excel';

    await bot.sendMessage(chatId, helpMessage);
});

module.exports = bot; 